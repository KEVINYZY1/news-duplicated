// This autogenerated skeleton file illustrates how to build a server.
// You should copy it to another filename to avoid overwriting it.

#include "shingleService.h"
#include <protocol/TBinaryProtocol.h>
#include <server/TSimpleServer.h>
#include <transport/TServerSocket.h>
#include <transport/TBufferTransports.h>

using namespace ::apache::thrift;
using namespace ::apache::thrift::protocol;
using namespace ::apache::thrift::transport;
using namespace ::apache::thrift::server;

using boost::shared_ptr;

using namespace  ;

class shingleServiceHandler : virtual public shingleServiceIf {
 public:
  shingleServiceHandler() {
    // Your initialization goes here
  }

  void getShingleString(std::vector<std::string> & _return, const std::string& contents) {
    // Your implementation goes here
    printf("getShingleString\n");
  }

  void getShingleLong(std::vector<int64_t> & _return, const std::string& contents) {
    // Your implementation goes here
    printf("getShingleLong\n");
  }

  void getSimDocuments(std::vector<int64_t> & _return, const std::string& contents) {
    // Your implementation goes here
    printf("getSimDocuments\n");
  }

};

int main(int argc, char **argv) {
  int port = 9090;
  shared_ptr<shingleServiceHandler> handler(new shingleServiceHandler());
  shared_ptr<TProcessor> processor(new shingleServiceProcessor(handler));
  shared_ptr<TServerTransport> serverTransport(new TServerSocket(port));
  shared_ptr<TTransportFactory> transportFactory(new TBufferedTransportFactory());
  shared_ptr<TProtocolFactory> protocolFactory(new TBinaryProtocolFactory());

  TSimpleServer server(processor, serverTransport, transportFactory, protocolFactory);
  server.serve();
  return 0;
}

