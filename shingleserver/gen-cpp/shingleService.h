/**
 * Autogenerated by Thrift Compiler (0.8.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef shingleService_H
#define shingleService_H

#include <TProcessor.h>
#include "shingles_types.h"



class shingleServiceIf {
 public:
  virtual ~shingleServiceIf() {}
  virtual void getShingleString(std::vector<std::string> & _return, const std::string& contents) = 0;
  virtual void getShingleLong(std::vector<int64_t> & _return, const std::string& contents) = 0;
  virtual void getSimDocuments(std::vector<int64_t> & _return, const std::string& contents) = 0;
};

class shingleServiceIfFactory {
 public:
  typedef shingleServiceIf Handler;

  virtual ~shingleServiceIfFactory() {}

  virtual shingleServiceIf* getHandler(const ::apache::thrift::TConnectionInfo& connInfo) = 0;
  virtual void releaseHandler(shingleServiceIf* /* handler */) = 0;
};

class shingleServiceIfSingletonFactory : virtual public shingleServiceIfFactory {
 public:
  shingleServiceIfSingletonFactory(const boost::shared_ptr<shingleServiceIf>& iface) : iface_(iface) {}
  virtual ~shingleServiceIfSingletonFactory() {}

  virtual shingleServiceIf* getHandler(const ::apache::thrift::TConnectionInfo&) {
    return iface_.get();
  }
  virtual void releaseHandler(shingleServiceIf* /* handler */) {}

 protected:
  boost::shared_ptr<shingleServiceIf> iface_;
};

class shingleServiceNull : virtual public shingleServiceIf {
 public:
  virtual ~shingleServiceNull() {}
  void getShingleString(std::vector<std::string> & /* _return */, const std::string& /* contents */) {
    return;
  }
  void getShingleLong(std::vector<int64_t> & /* _return */, const std::string& /* contents */) {
    return;
  }
  void getSimDocuments(std::vector<int64_t> & /* _return */, const std::string& /* contents */) {
    return;
  }
};


class shingleService_getShingleString_args {
 public:

  shingleService_getShingleString_args() : contents("") {
  }

  virtual ~shingleService_getShingleString_args() throw() {}

  std::string contents;

  void __set_contents(const std::string& val) {
    contents = val;
  }

  bool operator == (const shingleService_getShingleString_args & rhs) const
  {
    if (!(contents == rhs.contents))
      return false;
    return true;
  }
  bool operator != (const shingleService_getShingleString_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const shingleService_getShingleString_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class shingleService_getShingleString_pargs {
 public:


  virtual ~shingleService_getShingleString_pargs() throw() {}

  const std::string* contents;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _shingleService_getShingleString_result__isset {
  _shingleService_getShingleString_result__isset() : success(false) {}
  bool success;
} _shingleService_getShingleString_result__isset;

class shingleService_getShingleString_result {
 public:

  shingleService_getShingleString_result() {
  }

  virtual ~shingleService_getShingleString_result() throw() {}

  std::vector<std::string>  success;

  _shingleService_getShingleString_result__isset __isset;

  void __set_success(const std::vector<std::string> & val) {
    success = val;
  }

  bool operator == (const shingleService_getShingleString_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const shingleService_getShingleString_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const shingleService_getShingleString_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _shingleService_getShingleString_presult__isset {
  _shingleService_getShingleString_presult__isset() : success(false) {}
  bool success;
} _shingleService_getShingleString_presult__isset;

class shingleService_getShingleString_presult {
 public:


  virtual ~shingleService_getShingleString_presult() throw() {}

  std::vector<std::string> * success;

  _shingleService_getShingleString_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};


class shingleService_getShingleLong_args {
 public:

  shingleService_getShingleLong_args() : contents("") {
  }

  virtual ~shingleService_getShingleLong_args() throw() {}

  std::string contents;

  void __set_contents(const std::string& val) {
    contents = val;
  }

  bool operator == (const shingleService_getShingleLong_args & rhs) const
  {
    if (!(contents == rhs.contents))
      return false;
    return true;
  }
  bool operator != (const shingleService_getShingleLong_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const shingleService_getShingleLong_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class shingleService_getShingleLong_pargs {
 public:


  virtual ~shingleService_getShingleLong_pargs() throw() {}

  const std::string* contents;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _shingleService_getShingleLong_result__isset {
  _shingleService_getShingleLong_result__isset() : success(false) {}
  bool success;
} _shingleService_getShingleLong_result__isset;

class shingleService_getShingleLong_result {
 public:

  shingleService_getShingleLong_result() {
  }

  virtual ~shingleService_getShingleLong_result() throw() {}

  std::vector<int64_t>  success;

  _shingleService_getShingleLong_result__isset __isset;

  void __set_success(const std::vector<int64_t> & val) {
    success = val;
  }

  bool operator == (const shingleService_getShingleLong_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const shingleService_getShingleLong_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const shingleService_getShingleLong_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _shingleService_getShingleLong_presult__isset {
  _shingleService_getShingleLong_presult__isset() : success(false) {}
  bool success;
} _shingleService_getShingleLong_presult__isset;

class shingleService_getShingleLong_presult {
 public:


  virtual ~shingleService_getShingleLong_presult() throw() {}

  std::vector<int64_t> * success;

  _shingleService_getShingleLong_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};


class shingleService_getSimDocuments_args {
 public:

  shingleService_getSimDocuments_args() : contents("") {
  }

  virtual ~shingleService_getSimDocuments_args() throw() {}

  std::string contents;

  void __set_contents(const std::string& val) {
    contents = val;
  }

  bool operator == (const shingleService_getSimDocuments_args & rhs) const
  {
    if (!(contents == rhs.contents))
      return false;
    return true;
  }
  bool operator != (const shingleService_getSimDocuments_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const shingleService_getSimDocuments_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class shingleService_getSimDocuments_pargs {
 public:


  virtual ~shingleService_getSimDocuments_pargs() throw() {}

  const std::string* contents;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _shingleService_getSimDocuments_result__isset {
  _shingleService_getSimDocuments_result__isset() : success(false) {}
  bool success;
} _shingleService_getSimDocuments_result__isset;

class shingleService_getSimDocuments_result {
 public:

  shingleService_getSimDocuments_result() {
  }

  virtual ~shingleService_getSimDocuments_result() throw() {}

  std::vector<int64_t>  success;

  _shingleService_getSimDocuments_result__isset __isset;

  void __set_success(const std::vector<int64_t> & val) {
    success = val;
  }

  bool operator == (const shingleService_getSimDocuments_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const shingleService_getSimDocuments_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const shingleService_getSimDocuments_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _shingleService_getSimDocuments_presult__isset {
  _shingleService_getSimDocuments_presult__isset() : success(false) {}
  bool success;
} _shingleService_getSimDocuments_presult__isset;

class shingleService_getSimDocuments_presult {
 public:


  virtual ~shingleService_getSimDocuments_presult() throw() {}

  std::vector<int64_t> * success;

  _shingleService_getSimDocuments_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

class shingleServiceClient : virtual public shingleServiceIf {
 public:
  shingleServiceClient(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) :
    piprot_(prot),
    poprot_(prot) {
    iprot_ = prot.get();
    oprot_ = prot.get();
  }
  shingleServiceClient(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, boost::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) :
    piprot_(iprot),
    poprot_(oprot) {
    iprot_ = iprot.get();
    oprot_ = oprot.get();
  }
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> getInputProtocol() {
    return piprot_;
  }
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> getOutputProtocol() {
    return poprot_;
  }
  void getShingleString(std::vector<std::string> & _return, const std::string& contents);
  void send_getShingleString(const std::string& contents);
  void recv_getShingleString(std::vector<std::string> & _return);
  void getShingleLong(std::vector<int64_t> & _return, const std::string& contents);
  void send_getShingleLong(const std::string& contents);
  void recv_getShingleLong(std::vector<int64_t> & _return);
  void getSimDocuments(std::vector<int64_t> & _return, const std::string& contents);
  void send_getSimDocuments(const std::string& contents);
  void recv_getSimDocuments(std::vector<int64_t> & _return);
 protected:
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> piprot_;
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> poprot_;
  ::apache::thrift::protocol::TProtocol* iprot_;
  ::apache::thrift::protocol::TProtocol* oprot_;
};

class shingleServiceProcessor : public ::apache::thrift::TProcessor {
 protected:
  boost::shared_ptr<shingleServiceIf> iface_;
  virtual bool process_fn(apache::thrift::protocol::TProtocol* iprot, apache::thrift::protocol::TProtocol* oprot, std::string& fname, int32_t seqid, void* callContext);
 private:
  std::map<std::string, void (shingleServiceProcessor::*)(int32_t, apache::thrift::protocol::TProtocol*, apache::thrift::protocol::TProtocol*, void*)> processMap_;
  void process_getShingleString(int32_t seqid, apache::thrift::protocol::TProtocol* iprot, apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_getShingleLong(int32_t seqid, apache::thrift::protocol::TProtocol* iprot, apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_getSimDocuments(int32_t seqid, apache::thrift::protocol::TProtocol* iprot, apache::thrift::protocol::TProtocol* oprot, void* callContext);
 public:
  shingleServiceProcessor(boost::shared_ptr<shingleServiceIf> iface) :
    iface_(iface) {
    processMap_["getShingleString"] = &shingleServiceProcessor::process_getShingleString;
    processMap_["getShingleLong"] = &shingleServiceProcessor::process_getShingleLong;
    processMap_["getSimDocuments"] = &shingleServiceProcessor::process_getSimDocuments;
  }

  virtual bool process(boost::shared_ptr<apache::thrift::protocol::TProtocol> piprot, boost::shared_ptr<apache::thrift::protocol::TProtocol> poprot, void* callContext);
  virtual ~shingleServiceProcessor() {}
};

class shingleServiceProcessorFactory : public ::apache::thrift::TProcessorFactory {
 public:
  shingleServiceProcessorFactory(const ::boost::shared_ptr< shingleServiceIfFactory >& handlerFactory) :
      handlerFactory_(handlerFactory) {}

  ::boost::shared_ptr< ::apache::thrift::TProcessor > getProcessor(const ::apache::thrift::TConnectionInfo& connInfo);

 protected:
  ::boost::shared_ptr< shingleServiceIfFactory > handlerFactory_;
};

class shingleServiceMultiface : virtual public shingleServiceIf {
 public:
  shingleServiceMultiface(std::vector<boost::shared_ptr<shingleServiceIf> >& ifaces) : ifaces_(ifaces) {
  }
  virtual ~shingleServiceMultiface() {}
 protected:
  std::vector<boost::shared_ptr<shingleServiceIf> > ifaces_;
  shingleServiceMultiface() {}
  void add(boost::shared_ptr<shingleServiceIf> iface) {
    ifaces_.push_back(iface);
  }
 public:
  void getShingleString(std::vector<std::string> & _return, const std::string& contents) {
    size_t sz = ifaces_.size();
    for (size_t i = 0; i < sz; ++i) {
      if (i == sz - 1) {
        ifaces_[i]->getShingleString(_return, contents);
        return;
      } else {
        ifaces_[i]->getShingleString(_return, contents);
      }
    }
  }

  void getShingleLong(std::vector<int64_t> & _return, const std::string& contents) {
    size_t sz = ifaces_.size();
    for (size_t i = 0; i < sz; ++i) {
      if (i == sz - 1) {
        ifaces_[i]->getShingleLong(_return, contents);
        return;
      } else {
        ifaces_[i]->getShingleLong(_return, contents);
      }
    }
  }

  void getSimDocuments(std::vector<int64_t> & _return, const std::string& contents) {
    size_t sz = ifaces_.size();
    for (size_t i = 0; i < sz; ++i) {
      if (i == sz - 1) {
        ifaces_[i]->getSimDocuments(_return, contents);
        return;
      } else {
        ifaces_[i]->getSimDocuments(_return, contents);
      }
    }
  }

};



#endif
